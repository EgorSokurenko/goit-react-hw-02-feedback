{"version":3,"sources":["compoments/Section/Section.js","compoments/Statistics/Statistics.js","compoments/FeedBackOptions/FeedBackOptions.js","compoments/Notification/Notification.js","Hooks/UseFeedBackS.js","App.js","index.js"],"names":["Section","title","children","className","Statistics","good","neutral","bad","total","positivePercentage","FeedBackOptions","options","onLeaveFeedback","map","option","index","onClick","Notification","message","useFeedBackState","key","console","log","window","localStorage","getItem","useState","JSON","parse","state","setState","useEffect","setItem","stringify","App","setGood","setNeutral","setBad","setTotal","feedback","s","Math","round","countPositiveFeedbackPercentage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4TAEe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,oBAAIC,UAAU,QAAd,SAAuBF,IACtBC,K,MCJQ,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,gCACE,4CACA,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,a,MCfO,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,8BACE,oBAAIT,UAAU,aAAd,SACGQ,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,6BACE,wBAAQZ,UAAU,SAASa,QAAS,kBAAMJ,EAAgBE,IAA1D,SACGA,KAFIC,U,MCLJ,SAASE,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,mBAAGf,UAAU,UAAb,SAAwBe,ICFjC,IASeC,EATU,SAACC,GACtBC,QAAQC,IAAIC,OAAOC,aAAaC,QAAQL,IACxC,MAAwBM,oBAAS,WAC/B,OAAOC,KAAKC,MAAML,OAAOC,aAAaC,QAAQL,OADhD,mBAAOS,EAAP,KAAcC,EAAd,KAKA,OAHAC,qBAAU,WACRP,aAAaQ,QAAQZ,EAAKO,KAAKM,UAAUJ,MACzC,CAACT,EAAIS,IACA,CAACA,EAAOC,ICkDJI,MApDf,WACE,MAAwBf,EAAiB,QAAzC,mBAAOd,EAAP,KAAa8B,EAAb,KACA,EAA8BhB,EAAiB,WAA/C,mBAAOb,EAAP,KAAgB8B,EAAhB,KACA,EAAsBjB,EAAiB,OAAvC,mBAAOZ,EAAP,KAAY8B,EAAZ,KACA,EAA0BX,mBAAS,GAAnC,mBAAOlB,EAAP,KAAc8B,EAAd,KAsBA,OArBAP,qBAAU,WAERO,EADsBjC,EAAKE,EAAID,KAE/B,CAACD,EAAKE,EAAID,IAoBV,eAAC,EAAD,CAASL,MAAO,wBAAhB,UACE,cAACS,EAAD,CACMC,QAAS,CAAC,OAAO,UAAU,OAC3BC,gBAtBV,SAAyB2B,GACvB,OAAOA,GACL,IAAI,OACJJ,GAAQ,SAAAK,GAAC,OAAEA,EAAE,KACb,MACA,IAAI,UACJJ,GAAW,SAAAI,GAAC,OAAEA,EAAE,KAChB,MACA,IAAI,MACJH,GAAO,SAAAG,GAAC,OAAEA,EAAE,SAeD,IAAVhC,EACG,cAAC,EAAD,CAAcU,QAAQ,sBAEtB,cAAC,EAAD,CACEb,KAAMA,EACNE,IAAKA,EACLD,QAASA,EACTE,MAAOA,EACPC,mBACED,EACIiC,KAAKC,MApBrB,SAA0ClC,GACpC,OAAQH,EAAOG,EAAS,IAmBHmC,CAAgCnC,IAC3C,QC7ClBoC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d3518fbd.chunk.js","sourcesContent":["import propTypes from \"prop-types\";\r\nimport \"./Section.css\";\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\nSection.propTypes = {\r\n  title: propTypes.string,\r\n  children: propTypes.array,\r\n};\r\n","import propTypes from \"prop-types\";\r\nimport \"./Statistics.css\";\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <div>\r\n      <h2>Statistics</h2>\r\n      <ul>\r\n        <li>Good:{good}</li>\r\n        <li>Neutral:{neutral}</li>\r\n        <li>Bad:{bad}</li>\r\n        <li>Total:{total}</li>\r\n        <li>Positive feedback:{positivePercentage}%</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\nStatistics.propTypes = {\r\n  good: propTypes.number,\r\n  neutral: propTypes.number,\r\n  bad: propTypes.number,\r\n  total: propTypes.number,\r\n  positivePercentage: propTypes.number,\r\n};\r\n","import \"./FeedBackOption.css\";\r\nimport PropTypes from \"prop-types\";\r\nexport default function FeedBackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div>\r\n      <ul className=\"listButton\">\r\n        {options.map((option, index) => (\r\n          <li key={index}>\r\n            <button className=\"button\" onClick={() => onLeaveFeedback(option)}>\r\n              {option}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\nFeedBackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n","import propTypes from \"prop-types\";\r\nimport \"./Notification.css\";\r\nexport default function Notification({ message }) {\r\n  return <p className=\"message\">{message}</p>;\r\n}\r\nNotification.propTypes = {\r\n  message: propTypes.string,\r\n};\r\n","import { useState, useEffect } from \"react\"\r\nconst useFeedBackState = (key) => {\r\n    console.log(window.localStorage.getItem(key));\r\n    const [state, setState]=useState(()=>{\r\n      return JSON.parse(window.localStorage.getItem(key)) })\r\n    useEffect(()=>{\r\n      localStorage.setItem(key, JSON.stringify(state))\r\n    },[key,state])\r\n    return [state, setState]\r\n}\r\nexport default useFeedBackState","import {useState, useEffect} from \"react\";\r\nimport Section from \"./compoments/Section/\";\r\nimport Statistics from \"./compoments/Statistics\";\r\nimport FeedBackOptions from \"./compoments/FeedBackOptions\";\r\nimport Notification from \"./compoments/Notification/\";\r\nimport useFeedBackState from \"./Hooks/UseFeedBackS\";\r\nfunction App(){\r\n  const [good, setGood] = useFeedBackState('good')\r\n  const [neutral, setNeutral] = useFeedBackState('neutral')\r\n  const [bad, setBad] = useFeedBackState('bad')\r\n  const [total, setTotal] = useState(0)\r\n  useEffect(()=>{\r\n    const totalFeedBack = good+bad+neutral\r\n    setTotal(totalFeedBack)\r\n  },[good,bad,neutral])\r\n  function onLeaveFeedback(feedback){\r\n    switch(feedback){\r\n      case'good':\r\n      setGood(s=>s+1)\r\n      break;\r\n      case'neutral':\r\n      setNeutral(s=>s+1)\r\n      break;\r\n      case'bad':\r\n      setBad(s=>s+1)\r\n      break;\r\n      default:break;\r\n    }\r\n  }\r\n  function countPositiveFeedbackPercentage (total){\r\n        return (good / total) * 100;\r\n      };\r\n  return(\r\n\r\n    <Section title={'PLEASE LEAVE FEEDBACK'}>\r\n      <FeedBackOptions\r\n            options={['good','neutral','bad']}\r\n            onLeaveFeedback={onLeaveFeedback}\r\n          />\r\n      {total === 0 ? (\r\n          <Notification message=\"No feedback given\" />\r\n        ) : (\r\n          <Statistics\r\n            good={good}\r\n            bad={bad}\r\n            neutral={neutral}\r\n            total={total}\r\n            positivePercentage={\r\n              total\r\n                ? Math.round(countPositiveFeedbackPercentage(total))\r\n                : 0\r\n            }\r\n          />\r\n        )}\r\n    </Section>        \r\n  )\r\n  \r\n}\r\nexport default App","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n"],"sourceRoot":""}