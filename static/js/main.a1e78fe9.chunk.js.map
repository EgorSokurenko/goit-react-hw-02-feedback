{"version":3,"sources":["compoments/Section/Section.js","compoments/FeedBack/Statistics/Statistics.js","compoments/FeedBack/FeedBackOptions/FeedBackOptions.js","compoments/Notification/Notification.js","App.js","index.js"],"names":["Section","title","children","className","Statistics","good","neutral","bad","total","positivePercentage","FeedBackOptions","options","onLeaveFeedback","map","option","index","onClick","Notification","message","App","state","onLeaveFeedBack","feedback","setState","countTotalFeedback","countPositiveFeedbackPercentage","this","Object","keys","Math","round","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAEe,SAASA,EAAT,GAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACvC,OACE,gCACE,oBAAIC,UAAU,QAAd,SAAuBF,IACtBC,K,MCJQ,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,MACAC,EACC,EADDA,mBAEA,OACE,gCACE,4CACA,+BACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,a,MCfO,SAASC,EAAT,GAAwD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACjD,OACE,8BACE,oBAAIT,UAAU,aAAd,SACGQ,EAAQE,KAAI,SAACC,EAAQC,GAAT,OACX,6BACE,wBAAQZ,UAAU,SAASa,QAAS,kBAAMJ,EAAgBE,IAA1D,SACGA,KAFIC,U,MCLJ,SAASE,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OAAO,mBAAGf,UAAU,UAAb,SAAwBe,I,ICG3BC,E,4MACJC,MAAQ,CACNf,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEPc,gBAAkB,SAACC,GACjB,EAAKC,SAAL,eAAiBD,EAAW,EAAKF,MAAME,GAAY,K,EAErDE,mBAAqB,WACnB,MAA+B,EAAKJ,MACpC,OADA,EAAQf,KAAR,EAAcE,IAAd,EAAmBD,S,EAGrBmB,gCAAkC,SAACjB,GACjC,OAAQ,EAAKY,MAAMf,KAAOG,EAAS,K,4CAErC,WACE,MAA+BkB,KAAKN,MAA5Bf,EAAR,EAAQA,KAAME,EAAd,EAAcA,IAAKD,EAAnB,EAAmBA,QACbE,EAAQkB,KAAKF,qBACnB,OACE,eAAC,EAAD,CAASvB,MAAM,wBAAf,UACE,cAACS,EAAD,CACEC,QAASgB,OAAOC,KAAKF,KAAKN,OAC1BR,gBAAiBc,KAAKL,kBAEb,IAAVb,EACC,cAAC,EAAD,CAAcU,QAAQ,sBAEtB,cAAC,EAAD,CACEb,KAAMA,EACNE,IAAKA,EACLD,QAASA,EACTE,MAAOA,EACPC,mBACED,EACIqB,KAAKC,MAAMJ,KAAKD,gCAAgCjB,IAChD,W,GApCAuB,aA6CHZ,IC9Cfa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a1e78fe9.chunk.js","sourcesContent":["import propTypes from \"prop-types\";\r\nimport \"./Section.css\";\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <div>\r\n      <h1 className=\"title\">{title}</h1>\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\nSection.propTypes = {\r\n  title: propTypes.string,\r\n  children: propTypes.array,\r\n};\r\n","import propTypes from \"prop-types\";\r\nimport \"./Statistics.css\";\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  total,\r\n  positivePercentage,\r\n}) {\r\n  return (\r\n    <div>\r\n      <h2>Statistics</h2>\r\n      <ul>\r\n        <li>Good:{good}</li>\r\n        <li>Neutral:{neutral}</li>\r\n        <li>Bad:{bad}</li>\r\n        <li>Total:{total}</li>\r\n        <li>Positive feedback:{positivePercentage}%</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\nStatistics.propTypes = {\r\n  good: propTypes.number,\r\n  neutral: propTypes.number,\r\n  bad: propTypes.number,\r\n  total: propTypes.number,\r\n  positivePercentage: propTypes.number,\r\n};\r\n","import \"./FeedBackOption.css\";\r\nimport PropTypes from \"prop-types\";\r\nexport default function FeedBackOptions({ options, onLeaveFeedback }) {\r\n  return (\r\n    <div>\r\n      <ul className=\"listButton\">\r\n        {options.map((option, index) => (\r\n          <li key={index}>\r\n            <button className=\"button\" onClick={() => onLeaveFeedback(option)}>\r\n              {option}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\nFeedBackOptions.propTypes = {\r\n  options: PropTypes.array,\r\n  onLeaveFeedback: PropTypes.func,\r\n};\r\n","import propTypes from \"prop-types\";\r\nimport \"./Notification.css\";\r\nexport default function Notification({ message }) {\r\n  return <p className=\"message\">{message}</p>;\r\n}\r\nNotification.propTypes = {\r\n  message: propTypes.string,\r\n};\r\n","import React from \"react\";\nimport { Component } from \"react\";\nimport Section from \"./compoments/Section/\";\nimport Statistics from \"./compoments/FeedBack/Statistics/\";\nimport FeedBackOptions from \"./compoments/FeedBack/FeedBackOptions/\";\nimport Notification from \"./compoments/Notification/\";\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  onLeaveFeedBack = (feedback) => {\n    this.setState({ [feedback]: this.state[feedback] + 1 });\n  };\n  countTotalFeedback = () => {\n    const { good, bad, neutral } = this.state;\n    return good + bad + neutral;\n  };\n  countPositiveFeedbackPercentage = (total) => {\n    return (this.state.good / total) * 100;\n  };\n  render() {\n    const { good, bad, neutral } = this.state;\n    const total = this.countTotalFeedback();\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedBackOptions\n          options={Object.keys(this.state)}\n          onLeaveFeedback={this.onLeaveFeedBack}\n        />\n        {total === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Statistics\n            good={good}\n            bad={bad}\n            neutral={neutral}\n            total={total}\n            positivePercentage={\n              total\n                ? Math.round(this.countPositiveFeedbackPercentage(total))\n                : 0\n            }\n          />\n        )}\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}